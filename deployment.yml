services:
  mysql8-container:
    container_name: mysql8-container
    image: mysql:8.2.0    
    restart: always
    ports:
      - "3307:3306"
    networks:
      - shopapp-network
    environment:
      MYSQL_ROOT_PASSWORD: Abc123456789@
      MYSQL_ROOT_HOST: "%"
  phpmyadmin8-container:
    image: phpmyadmin/phpmyadmin    
    container_name: phpmyadmin8-container
    restart: always 
    ports:
      - "8088:80" #port mapping
    environment:
      PMA_HOST: mysql8-container #phpMyAdmin Host, PMA = PHP My Amin
    networks:
      - shopapp-network
  sqlserver2022-container:
    image: mcr.microsoft.com/mssql/server:2022-latest    
    container_name: sqlserver2022-container
    restart: always 
    ports:
      - "1434:1433" 
    environment:
      SA_PASSWORD: Abc123456789@ 
      ACCEPT_EULA: Y
    networks:
      - shopapp-network
  redis-container:
        image: docker.io/redis:7.2.3
        container_name: redis-container
        restart: always
        ports:
          - "6379:6379" # Port mapping for Redis, you can change the host port as needed
        volumes:
          - ./redis-data:/data # Mount a volume for Redis data persistence
        networks:
          - shopapp-network
  shopapp-spring-container:    
        container_name: shopapp-spring-container    
        build:
          context: .
          dockerfile: DockerfileJavaSpring      
          #docker tag <image_id> shopapp-spring:1.0.0    
        ports:
          - 8099:8088
        environment:
          #SPRING_DATASOURCE_URL: jdbc:mysql://mysql8-container:3306/ShopApp?serverTimezone=UTC&allowPublicKeyRetrieval=true
          SPRING_DATASOURCE_URL: jdbc:mysql://mysql8-container:3306/ShopApp?serverTimezone=UTC&allowPublicKeyRetrieval=true            
          MYSQL_ROOT_PASSWORD: Abc123456789@
        #depends_on only waits for the container to start, not for the service inside the container to be fully operational
        depends_on:      
          - mysql8-container
        networks:
          - shopapp-network    
        healthcheck:
          #test: ["CMD-SHELL", "curl --fail http://localhost:8088/healthcheck/health || exit 1"]
          test: ["CMD-SHELL", "curl --fail http://localhost:8088/api/v1/actuator/health || exit 1"]
          interval: 30s
          timeout: 10s
          retries: 3
          start_period: 20s #20s after container created, health check  
networks:
     shopapp-network:

#docker-compose -f ./deployment.yaml down
#docker container prune  xoas het cai dat
#docker-compose -f ./deployment.yaml up -d
